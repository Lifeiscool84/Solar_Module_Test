#include <Arduino.h>
#include <IridiumSBD.h>
#include <Wire.h>

#define DIAGNOSTICS true      // Enable diagnostics for detailed feedback
#define READINGS_PER_LOCATION 3  // Number of readings to take at each location
#define READING_INTERVAL 10000   // Time between readings (10 seconds)
#define STABILIZATION_TIME 30000 // Time to wait for signal to stabilize (30 seconds)

// Declare the IridiumSBD object using default I2C address
IridiumSBD modem(Wire);

// Global variables for testing
unsigned long testStartTime = 0;
int readingCount = 0;
float averageSignal = 0;
bool testInProgress = false;

// Function declarations
void printDiagnosticInfo();
void printSignalQualityDescription(int quality);
void startNewTest();
void takeReading();
void printTestResults();

// Diagnostic callbacks
void ISBDConsoleCallback(IridiumSBD *device, char c) {
  Serial.write(c);
}

void ISBDDiagsCallback(IridiumSBD *device, char c) {
  Serial.write(c);
}

void printDiagnosticInfo() {
  Serial.println("\n=== Iridium Module Diagnostic Test ===");
  Serial.println("1. Checking I2C connection...");

  // Check that the Qwiic Iridium is attached
  if (!modem.isConnected()) {
    Serial.println("FAILED: Qwiic Iridium is not connected! Please check wiring.");
    return;
  }
  Serial.println("PASSED: Qwiic Iridium is connected");

  // Enable the supercapacitor charger
  Serial.println("\n2. Charging supercapacitors...");
  modem.enableSuperCapCharger(true);

  // Wait for the supercapacitor charger PGOOD signal to go high
  while (!modem.checkSuperCapCharger()) {
    Serial.println("Waiting for supercapacitors to charge...");
    delay(1000);
  }
  Serial.println("PASSED: Supercapacitors charged!");

  // Enable power for the 9603N
  Serial.println("\n3. Enabling 9603N power...");
  modem.enable9603Npower(true);
  Serial.println("PASSED: Power enabled");
  
  // Begin satellite modem operation
  Serial.println("\n4. Starting modem...");
  modem.setPowerProfile(IridiumSBD::USB_POWER_PROFILE);
  int err = modem.begin();
  if (err != ISBD_SUCCESS) {
    Serial.print("FAILED: Begin failed with error ");
    Serial.println(err);
    if (err == ISBD_NO_MODEM_DETECTED)
      Serial.println("ERROR: No modem detected - check wiring!");
    return;
  }
  Serial.println("PASSED: Modem started successfully");

  // Get the IMEI
  Serial.println("\n5. Checking IMEI...");
  char IMEI[16];
  err = modem.getIMEI(IMEI, sizeof(IMEI));
  if (err != ISBD_SUCCESS) {
    Serial.print("FAILED: getIMEI failed with error ");
    Serial.println(err);
  } else {
    Serial.print("PASSED: IMEI is ");
    Serial.println(IMEI);
  }

  // Check firmware version
  Serial.println("\n6. Checking firmware version...");
  char version[12];
  err = modem.getFirmwareVersion(version, sizeof(version));
  if (err != ISBD_SUCCESS) {
    Serial.print("FAILED: Firmware version check failed with error ");
    Serial.println(err);
  } else {
    Serial.print("PASSED: Firmware Version: ");
    Serial.println(version);
  }

  // Check signal quality
  Serial.println("\n7. Checking signal quality...");
  int signalQuality = -1;
  err = modem.getSignalQuality(signalQuality);
  if (err != ISBD_SUCCESS) {
    Serial.print("FAILED: Signal quality check failed with error ");
    Serial.println(err);
  } else {
    Serial.print("PASSED: Signal Quality: ");
    Serial.print(signalQuality);
    Serial.println("/5");
    if (signalQuality < 2) {
      Serial.println("WARNING: Signal quality is below recommended level (2)");
    }
  }

  // Check Network Available
  Serial.println("\n8. Checking Network Availability...");
  if (!modem.checkNetworkAvailable()) {
    Serial.println("FAILED: Network is not available");
    Serial.println("(This might be because the 9603N has not yet acquired the ring channel.)");
  } else {
    Serial.println("PASSED: Network is available!");
  }

  // Clean up - Put modem to sleep
  Serial.println("\n=== Cleaning up ===");
  Serial.println("1. Putting modem to sleep...");
  err = modem.sleep();
  if (err != ISBD_SUCCESS) {
    Serial.print("FAILED: Sleep failed with error ");
    Serial.println(err);
  }

  // Disable 9603N power
  Serial.println("2. Disabling 9603N power...");
  modem.enable9603Npower(false);

  // Disable the supercapacitor charger
  Serial.println("3. Disabling supercapacitor charger...");
  modem.enableSuperCapCharger(false);

  Serial.println("\n=== Diagnostic Test Complete ===");
}

void setup() {
  // Start the console serial port
  Serial.begin(115200);
  while (!Serial); // Wait for the user to open the serial monitor
  
  // Start the I2C wire port connected to the satellite modem
  Wire.begin();
  Wire.setClock(400000); //Set I2C clock speed to 400kHz
  
  // Print welcome message
  Serial.println(F("Iridium Signal Strength Test Program"));
  Serial.println(F("===================================="));
  
  // Initialize modem
  Serial.println(F("Initializing modem..."));
  
  // Check I2C connection
  if (!modem.isConnected()) {
    Serial.println(F("ERROR: Qwiic Iridium not connected! Check wiring."));
    while (1);
  }
  
  // Enable the supercapacitor charger
  Serial.println(F("Enabling supercapacitor charger..."));
  modem.enableSuperCapCharger(true);
  
  // Wait for supercapacitors to charge
  while (!modem.checkSuperCapCharger()) {
    Serial.println(F("Charging supercapacitors..."));
    delay(1000);
  }
  Serial.println(F("Supercapacitors charged!"));
  
  // Enable 9603N power
  Serial.println(F("Enabling 9603N power..."));
  modem.enable9603Npower(true);
  
  // Configure modem
  modem.setPowerProfile(IridiumSBD::USB_POWER_PROFILE);
  int err = modem.begin();
  if (err != ISBD_SUCCESS) {
    Serial.print(F("Begin failed: error "));
    Serial.println(err);
    while (1);
  }

  // Print test instructions
  Serial.println(F("\nTest Commands:"));
  Serial.println(F("'N' - Start New Test Location"));
  Serial.println(F("'R' - Take Reading"));
  Serial.println(F("'P' - Print Current Results"));
  Serial.println(F("'H' - Show This Help Menu"));
  Serial.println(F("\nReady to begin testing!"));
}

void loop() {
  if (Serial.available()) {
    char command = toupper(Serial.read());
    
    switch (command) {
      case 'N':
        startNewTest();
        break;
      case 'R':
        takeReading();
        break;
      case 'P':
        printTestResults();
        break;
      case 'H':
        // Print help menu
        Serial.println(F("\nTest Commands:"));
        Serial.println(F("'N' - Start New Test Location"));
        Serial.println(F("'R' - Take Reading"));
        Serial.println(F("'P' - Print Current Results"));
        Serial.println(F("'H' - Show This Help Menu"));
        break;
    }
  }
}

void startNewTest() {
  Serial.println(F("\n=== Starting New Test Location ==="));
  Serial.println(F("Enter location description (end with newline):"));
  while (!Serial.available()) {} // Wait for input
  String location = Serial.readStringUntil('\n');
  
  Serial.println(F("Enter weather conditions (end with newline):"));
  while (!Serial.available()) {} // Wait for input
  String weather = Serial.readStringUntil('\n');
  
  Serial.print(F("\nTest Location: ")); Serial.println(location);
  Serial.print(F("Date/Time: ")); Serial.println(millis()/1000);
  Serial.print(F("Weather: ")); Serial.println(weather);
  
  testStartTime = millis();
  readingCount = 0;
  averageSignal = 0;
  testInProgress = true;
  
  Serial.println(F("\nWaiting for signal to stabilize..."));
  delay(STABILIZATION_TIME);
  Serial.println(F("Ready for readings. Press 'R' to take a reading."));
}

void takeReading() {
  if (!testInProgress) {
    Serial.println(F("Please start a new test first with 'N'"));
    return;
  }
  
  if (readingCount >= READINGS_PER_LOCATION) {
    Serial.println(F("Maximum readings reached for this location."));
    Serial.println(F("Start new test location with 'N'"));
    return;
  }
  
  Serial.println(F("\n--- Taking Reading ---"));
  int signalQuality = -1;
  int err = modem.getSignalQuality(signalQuality);
  
  if (err != ISBD_SUCCESS) {
    Serial.print(F("ERROR: Signal check failed with error ")); 
    Serial.println(err);
    return;
  }
  
  readingCount++;
  averageSignal += signalQuality;
  
  Serial.print(F("Reading #")); Serial.print(readingCount);
  Serial.print(F(" Signal Quality: ")); Serial.print(signalQuality);
  Serial.print(F("/5 - "));
  printSignalQualityDescription(signalQuality);
  
  if (readingCount < READINGS_PER_LOCATION) {
    Serial.println(F("\nWaiting for next reading interval..."));
    delay(READING_INTERVAL);
    Serial.println(F("Ready for next reading. Press 'R'."));
  } else {
    float finalAverage = averageSignal / READINGS_PER_LOCATION;
    Serial.print(F("\nTest complete! Average signal quality: "));
    Serial.println(finalAverage, 2);
  }
}

void printSignalQualityDescription(int quality) {
  Serial.print(F("("));
  switch (quality) {
    case 0:
      Serial.print(F("No signal"));
      break;
    case 1:
      Serial.print(F("Poor"));
      break;
    case 2:
      Serial.print(F("Fair"));
      break;
    case 3:
      Serial.print(F("Good"));
      break;
    case 4:
      Serial.print(F("Very Good"));
      break;
    case 5:
      Serial.print(F("Excellent"));
      break;
    default:
      Serial.print(F("Unknown"));
  }
  Serial.println(F(")"));
}

void printTestResults() {
  if (!testInProgress || readingCount == 0) {
    Serial.println(F("No test data available."));
    return;
  }
  
  Serial.println(F("\n=== Current Test Results ==="));
  Serial.print(F("Readings taken: ")); Serial.println(readingCount);
  Serial.print(F("Average signal: ")); Serial.println(averageSignal / readingCount, 2);
  Serial.print(F("Test duration: ")); Serial.print((millis() - testStartTime) / 1000); Serial.println(F(" seconds"));
} 